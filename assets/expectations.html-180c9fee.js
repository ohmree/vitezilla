import{_ as n,W as s,X as a,a2 as t}from"./framework-72c45ff9.js";const p={},e=t(`<h1 id="expectations" tabindex="-1"><a class="header-anchor" href="#expectations" aria-hidden="true">#</a> Expectations</h1><p>When you are mocking a method, you have two ways to add expectations:</p><ul><li><p><code>expect()</code> allows you to be specific about an expected call</p></li><li><p><code>spy()</code> allows you to handle the call yourself.</p></li><li><p>Each of these calls is only good for one call.</p><ul><li>If you call the original method multiple times, you will get an error unless you add more expectations.</li></ul></li><li><p>Expectations must be added before calling the original methods.</p></li></ul><h2 id="expect" tabindex="-1"><a class="header-anchor" href="#expect" aria-hidden="true">#</a> Expect</h2><p>Expect has the following signature:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>expect<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VitezillaFunction<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> VitezillaFunction<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Let&#39;s see a few example uses:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> deepMock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitezilla&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>worker<span class="token punctuation">,</span> mockWorker<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">deepMock</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyWorker<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;myWorker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// parameters will be ignored</span>
  mockWorker<span class="token punctuation">.</span>myFunction<span class="token punctuation">.</span>expect<span class="token punctuation">;</span>
  <span class="token comment">// The call must be made with these 2 parameters.</span>
  mockWorker<span class="token punctuation">.</span>myFunction<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// The call must be made with &quot;foo&quot; as first parameter any anything as second parameter.</span>
  <span class="token comment">// I.e. this is the equivalent of expect(x).toHaveBeenCalledWith(...)</span>
  mockWorker<span class="token punctuation">.</span>myFunction<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> expect<span class="token punctuation">.</span><span class="token function">anything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can further specify details of the call by adding a dot after any of the above and using these available options:</p><p>For synchronous functions:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Always available:</span>
<span class="token function-variable function">times</span><span class="token operator">:</span> <span class="token punctuation">(</span>count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>

<span class="token comment">// Available on synchronous methods:</span>
<span class="token function-variable function">andReturn</span><span class="token operator">:</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VitezillaTimes<span class="token punctuation">;</span>
<span class="token function-variable function">andThrow</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VitezillaTimes<span class="token punctuation">;</span>

<span class="token comment">// Available on asynchronous methods:</span>
<span class="token function-variable function">andResolve</span><span class="token operator">:</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VitezillaTimes<span class="token punctuation">;</span>
<span class="token function-variable function">andReject</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VitezillaTimes<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>As you can see, all of these (except <code>times</code>) return <code>VitezillaTimes</code>, which allows you to call <code>.times()</code> on them.</li><li>Times can be used to repeat the statement you just made <code>count</code> times.</li></ul><p>Let&#39;s see a few example uses:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> deepMock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitezilla&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>worker<span class="token punctuation">,</span> mockWorker<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">deepMock</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyWorker<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;myWorker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  mockWorker<span class="token punctuation">.</span>myFunction<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mockWorker<span class="token punctuation">.</span>myAsyncFunction<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">andThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;No way&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mockWorker<span class="token punctuation">.</span>myAsyncFunction<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> expect<span class="token punctuation">.</span><span class="token function">anything</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andResolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spy" tabindex="-1"><a class="header-anchor" href="#spy" aria-hidden="true">#</a> Spy</h2><p>Spy is comparatively simple. It only expects the call and then delegates it to the function you specified.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function-variable function">spy</span><span class="token operator">:</span> <span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VitezillaTimes<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Let&#39;s see a few example uses:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> vi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> deepMock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitezilla&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>worker<span class="token punctuation">,</span> mockWorker<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">deepMock</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyWorker<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;myWorker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> storedParam <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  mockWorker<span class="token punctuation">.</span>myFunction<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span>param <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    storedParam <span class="token operator">=</span> param<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> spy <span class="token operator">=</span> vi<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mockWorker<span class="token punctuation">.</span>myFunction<span class="token punctuation">.</span><span class="token function">spy</span><span class="token punctuation">(</span>spy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getting-mocked-calls" tabindex="-1"><a class="header-anchor" href="#getting-mocked-calls" aria-hidden="true">#</a> Getting mocked calls</h2><p>Sometimes you want to access the parameters of calls that have been made.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function-variable function">getMockCalls</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Let&#39;s see an example use:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> test<span class="token punctuation">,</span> expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitest&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> deepMock <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vitezilla&#39;</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>worker<span class="token punctuation">,</span> mockWorker<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">deepMock</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyWorker<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;myWorker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  mockWorker<span class="token punctuation">.</span>myFunction<span class="token punctuation">.</span>expect<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  worker<span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  worker<span class="token punctuation">.</span><span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">expect</span><span class="token punctuation">(</span>mockWorker<span class="token punctuation">.</span>myFunction<span class="token punctuation">.</span><span class="token function">getMockCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","expectations.html.vue"]]);export{r as default};
